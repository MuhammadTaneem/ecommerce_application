"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-ugt%_jdc^eowo+1web+t3xb1m@*k7p3bideyw7if^ltqbt4zsx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'localhost:8000',
    'localhost:4200',
    'localhost:5173',
]

# Application definition
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'rest_framework',
    'rest_framework.authtoken',
    # 'djoser',

    'products',
    'core',
    'order',
    'products.review'

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "core.parser_middleware.NestedFormDataMiddleware",

]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('ENGINE'),
        'NAME': os.getenv('NAME'),
        'USER': os.getenv('USER'),
        'PASSWORD': os.getenv('PASSWORD'),
        'HOST': os.getenv('HOST'),
        'PORT': os.getenv('PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators


LANGUAGE_CODE = "en-us"

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field


# CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True

# CORS_ORIGIN_WHITELIST = (
#     'http://localhost:8000',
#     'http://localhost:4200',
#
# )
SITE_ID = 1
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ],
# }

AUTH_USER_MODEL = 'core.User'
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'core.authentication.TAuthJWTAuthentication',
    ),
}

CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    'http://localhost:8000',
    'http://localhost:4200',

)

TAUTH = {
    'login_field': 'email',
    'algorithm': 'HS256',
    'access_token_life_time': timedelta(minutes=1200),
    'active_token_life_time': timedelta(minutes=10),
    'reset_token_life_time': timedelta(minutes=10),
    'is_active_required': False,
    'account_disabled_message': 'User account is disabled',
    'login_url': 'http://localhost:4200/login/',
    'active_user_url': 'http://localhost:4200/active/?token=',
    'reset_password_url': 'http://localhost:4200/reset/?token=',
    'password_min_length': 6,
    'password': {
            'min_length': 6,
            'is_capital': False,
            'is_special': False,
            'is_digit': False,
        },
}
# static & media
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_URL = 'static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# SMTP Email Backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'famouswebdeveloper@gmail.com'  # Your email address
# EMAIL_HOST_PASSWORD = '********'  # Your email password
EMAIL_HOST_PASSWORD = 'zzdjlscpwsggtrdl'  # Your email password

# Optimize Celery settings
# CELERY_TASK_ALWAYS_EAGER = False
# CELERY_TASK_ACKS_LATE = True
# CELERY_WORKER_PREFETCH_MULTIPLIER = 1
# CELERY_TASK_SOFT_TIME_LIMIT = 60
# CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
# CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL'),
CELERY_RESULT_BACKEND =  os.getenv('CELERY_RESULT_BACKEND'),
CELERY_TIMEZONE = TIME_ZONE
# CELERY_BROKER_POOL_LIMIT = 100
# CELERY_BROKER_CONNECTION_TIMEOUT = 3
# CELERY_BROKER_CONNECTION_RETRY = True
# CELERY_BROKER_CONNECTION_MAX_RETRIES = 3
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
# CELERY_IMPORTS = ('bus_ticket_booking.tasks',)

# CELERY_BEAT_SCHEDULE = {
#     'cancel_pending_reservation': {
#         'task': 'bus_ticket_booking.tasks.cancel_pending_reservation',  # Task to run
#         'schedule': timedelta(minutes=1)  # Run every 5 minutes
#             # also  you can use crontab for scheduling better control
#     },
#     # 'delete_completed_tasks': {
#     #     'task': 'bus_ticket_booking.tasks.delete_completed_tasks',  # Task to run
#     #     'schedule': timedelta(minutes=5)  # Run every 5 minutes
#     # },
# }

CACHE_TTL = 60 * 6 * 1
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        # 'LOCATION': 'redis://127.0.0.1:6379/1',
        'LOCATION':  os.getenv('CACHES_LOCATION'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
    }
}
