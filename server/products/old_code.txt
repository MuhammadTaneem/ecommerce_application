
# from rest_framework import serializers


# # from social_core.utils import slugify
#
# from .models import VariantAttribute, VariantValue, Category, Product, ProductImage, SKU, Brand, Tag
# from django.conf import settings
#
#
# class BrandSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = Brand
#         fields = ['id', 'name', 'description', 'created_at', 'updated_at']
#
#
# class TagSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = Tag
#         fields = ['id', 'name', 'slug', 'created_at', 'updated_at']
#
#
# class VariantAttributeSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = VariantAttribute
#         fields = ['id', 'name', 'slug']
#
#
# class VariantDetailAttributeSerializer(VariantAttributeSerializer):
#     values = serializers.SerializerMethodField()
#
#     class Meta(VariantAttributeSerializer.Meta):
#         fields = VariantAttributeSerializer.Meta.fields + ['values']
#
#     def get_values(self, obj):
#         if obj.values.exists():
#             return VariantValueSerializer(obj.values, many=True).data
#         return []
#
#
# class VariantValueSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = VariantValue
#         fields = ['id', 'attribute', 'value']
#
#
#


#
#
# class ProductImageSerializer(serializers.ModelSerializer):
#     # image_url = serializers.SerializerMethodField()
#
#     class Meta:
#         model = ProductImage
#         fields = ['id', 'product', 'image', 'is_main', 'created_at', 'updated_at']
#
#     def get_image(self, obj):
#         request = self.context.get('request')
#         if request and obj.image:
#             return request.build_absolute_uri(obj.image.url)
#         return None
#
#
# class SKUSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = SKU
#         fields = ['id', 'product', 'sku_code', 'price', 'stock_quantity', 'variants_dict', 'variants']
#
#     def run_validation(self, data):
#         variants_data = data.get('variants')
#         if isinstance(variants_data, list):
#             data['variants'] = [list(variant.values())[0] for variant in variants_data]
#         return super().run_validation(data)
#
#     def validate(self, data):
#         variants_list = []
#         variants_data = data.get('variants')
#         for variant in variants_data:
#             if variant.attribute.name in variants_list:
#                 raise serializers.ValidationError({
#                     'variants': f"{variant.attribute.name} is added multiple times."
#                 })
#             variants_list.append(variant.attribute.name)
#         return data
#
#
# class ProductSerializer(serializers.ModelSerializer):
#     images = ProductImageSerializer(many=True, read_only=True)
#
#     class Meta:
#         model = Product
#         fields = ['id', 'name', 'description', 'base_price','discount_price', 'stock_quantity', 'has_variants',
#                   'images', 'category', 'key_features', 'additional_info', 'brand', 'tags']
#
#     # def validate_category(self, value):
#     #     # import pdb;pdb.set_trace()
#     #     if not value or value == '':
#     #         raise serializers.ValidationError("Category is required.")
#     #     return value
#
#     def validate(self, attrs):
#         if 'category' not in attrs or not attrs['category']:
#             raise serializers.ValidationError({"category": "Category is required."})
#         return attrs
#
#
# class ProductListSerializer(serializers.ModelSerializer):
#     image = serializers.SerializerMethodField(read_only=True)
#
#     class Meta:
#         model = Product
#         fields = ['id', 'name', 'base_price', 'image', 'has_variants']
#
#     def get_image(self, obj):
#         request = self.context.get('request')
#         image = obj.images.filter(is_main=True).first() or obj.images.first()
#
#         if image and request:
#             return request.build_absolute_uri(image.image.url)
#         elif image and not request:
#             return image.image.url
#         return None
#
#
# class AdminProductListSerializer(ProductListSerializer):
#     class Meta(ProductListSerializer.Meta):
#         fields = ProductListSerializer.Meta.fields + ['stock_quantity', 'created_at']
#
#
# class ProductDetailsSerializer(serializers.ModelSerializer):
#     images = ProductImageSerializer(many=True, read_only=True)
#     skus = SKUSerializer(many=True)
#
#     class Meta:
#         model = Product
#         fields = ['id', 'name', 'base_price', 'stock_quantity', 'has_variants', 'is_deleted', 'additional_info',
#                   'short_description', 'discount_price', 'category', 'key_features', 'description', 'images', 'skus',
#                   'brand', 'tags']
#
#     def validate(self, attrs):
#         if 'category' not in attrs or not attrs['category']:
#             raise serializers.ValidationError({"category": "Category is required."})
#         return attrs
#
#     def create(self, validated_data):
#         # import pdb; pdb.set_trace()
#         skus_data = self.initial_data.get('skus', None)
#         product = Product.objects.create(**validated_data)
#         for sku_data in skus_data:
#             SKU.objects.create(product=product, **sku_data)
#         return product








views

# from django.db import connection
# from django.db.models import Q
# from django.views.decorators.csrf import csrf_exempt
# from rest_framework import generics, status
# from rest_framework.decorators import api_view, permission_classes
# from rest_framework.response import Response
# from rest_framework.views import APIView
# from core.authentication import require_permissions
# from core.enum import PermissionEnum
# from .models import VariantAttribute, VariantValue, Category, Product, ProductImage, SKU
# from .serializers import VariantAttributeSerializer, VariantValueSerializer, CategorySerializer, ProductSerializer, \
#     ProductImageSerializer, SKUSerializer, ProductDetailsSerializer, ProductListSerializer
#
#
# # class VariantAttributeListCreateView(generics.ListCreateAPIView):
# #     queryset = VariantAttribute.objects.all()
# #     serializer_class = VariantAttributeSerializer
# #
# #
# # class VariantAttributeDetailView(generics.RetrieveUpdateDestroyAPIView):
# #     queryset = VariantAttribute.objects.all()
# #     serializer_class = VariantAttributeSerializer
# #
# #
# # class VariantValueListCreateView(generics.ListCreateAPIView):
# #     queryset = VariantValue.objects.all()
# #     serializer_class = VariantValueSerializer
# #
# #
# # class VariantValueDetailView(generics.RetrieveUpdateDestroyAPIView):
# #     queryset = VariantValue.objects.all()
# #     serializer_class = VariantValueSerializer
#
#
# # class CategoryListView(generics.ListAPIView):
# #     queryset = Category.objects.all()
# #     serializer_class = CategorySerializer
#
# @api_view(['GET'])
# def category_lst_view(request):
#     categories = Category.objects.filter(parent__isnull=True)
#     serializer = CategorySerializer(categories, many=True)
#     return Response(serializer.data)
#
#
# # @api_view() c
# # def category_product(request, slug=None):
# #     if slug:
# #         categories = Category.objects.filter(
# #             Q(slug=slug) |
# #             Q(slug__startswith=slug + '_')
# #         ).prefetch_related('products')
# #         products = [product for category in categories for product in category.products.all()]
# #     serializer = ProductListSerializer(products, many=True, context={'request': request})
# #     return Response(serializer.data)
#
#
# @api_view(['GET'])
# # @permission_classes([require_permissions(PermissionEnum.VIEW_USER)])
# # @require_permissions([PermissionEnum.product_list, PermissionEnum.category_delete])
# # @require_permissions(PermissionEnum.product_list)
# def products_list(request):
#     products = product_filter(request)
#     categories = Category.objects.filter(parent__isnull=True)
#     # categories = Category.objects.all()
#     product_serializer = ProductListSerializer(products, many=True, context={'request': request})
#     category_serializer = CategorySerializer(categories, many=True)
#     return Response({'product': product_serializer.data, 'categories': category_serializer.data})
#
#
# def product_filter(request, show_deleted=False, show_active=None):
#     category = request.data.get('category', None)
#     min_price = request.data.get('min_price', None)
#     max_price = request.data.get('max_price', None)
#     search_query = request.query_params.get('s')
#     variants_items = request.data.get('variants')
#     products = Product.objects.filter(is_deleted=show_deleted)
#     if show_active:
#         products = products.filter(is_active=show_active)
#     if category:
#         categories_filter = Q(slug=category) | Q(slug__startswith=category + '_')
#         products = Product.objects.filter(category__in=categories_filter)
#
#     if min_price is not None:
#         products = products.filter(base_price__gte=min_price)
#     if max_price is not None:
#         products = products.filter(base_price__lte=max_price)
#
#     if search_query:
#         search_filter = (
#                 Q(name__icontains=search_query) |
#                 Q(description__icontains=search_query) |
#                 Q(short_description__icontains=search_query)
#         )
#         products = products.filter(search_filter)
#
#     variant_filters = []
#     if variants_items:
#         for key, value in variants_items.items():
#             variant_value = VariantValue.objects.filter(attribute__name__iexact=key, value__iexact=value).first()
#             print(variant_value)
#             if variant_value:
#                 variant_filters.append(variant_value)
#     if variant_filters is not None and len(variant_filters) > 0:
#         products = products.filter(skus__variants__in=variant_filters)
#     return products
#
#
# @api_view(['GET', 'POST'])
# def product_details_view(request, pk):
#     if request.method == 'GET':
#         try:
#             product = Product.objects.get(pk=pk)
#             product_serializer = ProductDetailsSerializer(product, context={'request': request})
#             return Response(product_serializer.data, status=status.HTTP_200_OK)
#         except Product.DoesNotExist:
#             return Response({'error': 'Product not found'}, status=status.HTTP_404_NOT_FOUND)
#
#     elif request.method == 'POST':
#         serializer = SKUSerializer(data=request.data)
#         if serializer.is_valid():
#             serializer.save()
#             return Response(serializer.data, status=status.HTTP_201_CREATED)
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
#
#
# class ProductImageListCreateView(generics.ListCreateAPIView):
#     queryset = ProductImage.objects.all()
#     serializer_class = ProductImageSerializer
#
#
# class ProductImageDetailView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = ProductImage.objects.all()
#     serializer_class = ProductImageSerializer
#
#
# # class SKUListCreateView(generics.ListCreateAPIView):
# #     queryset = SKU.objects.all()
# #     serializer_class = SKUSerializer
#
#
# class SKUDetailView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = SKU.objects.all()
#     serializer_class = SKUSerializer





# Variant Attribute Views
# class VariantAttributeListCreateView(generics.ListCreateAPIView):
#     queryset = VariantAttribute.objects.all()
#     serializer_class = VariantAttributeSerializer
#
#
# class VariantAttributeDetailView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = VariantAttribute.objects.all()
#     serializer_class = VariantAttributeSerializer


# Variant Value Views
# class VariantValueListCreateView(generics.ListCreateAPIView):
#     queryset = VariantValue.objects.all()
#     serializer_class = VariantValueSerializer
#
#
# class VariantValueDetailView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = VariantValue.objects.all()
#     serializer_class = VariantValueSerializer